{
  "openapi": "3.0.0",
  "paths": {
    "/api/v1/appVersion/checkAppVersionIsLatest": {
      "get": {
        "operationId": "AppVersionController_checkAppVersionIsLatest",
        "summary": "Check App Version Is Latest",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/api/v1/beamableWallets": {
      "get": {
        "operationId": "BeamableWalletsController_getBeamableWalletsForLoggedInUser",
        "summary": "Get Beamable Wallets For Logged In User",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/api/v1/beamableWallets/isBeamableWallet/{walletAddress}": {
      "get": {
        "operationId": "BeamableWalletsController_isBeamableWallet",
        "summary": "Check if a wallet is Beamable",
        "parameters": [
          {
            "name": "walletAddress",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/api/v1/beamableWallets/addBeamableWallet": {
      "post": {
        "operationId": "BeamableWalletsController_addAddressForLoggedInUser",
        "summary": "Add Beamable Wallet",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddBeamableWalletDTO"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        }
      }
    },
    "/api/v1/beamableWallets/updateBeamableWallet": {
      "patch": {
        "operationId": "BeamableWalletsController_updateBeamableWallet",
        "summary": "Update Beamable Wallet",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateBeamableWalletDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/api/v1/beamableWallets/deleteBeamableWallet": {
      "patch": {
        "operationId": "BeamableWalletsController_deleteBeamableWallet",
        "summary": "Delete Beamable Wallet",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteBeamableWalletDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/api/v1/admin/testing/triggerWebhook": {
      "post": {
        "operationId": "AdminBeamWebhooksController_logError",
        "summary": "Trigger Webhook",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TriggerWebhookDTO"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "admin"
        ]
      }
    },
    "/api/v1/bendMigration/store": {
      "post": {
        "operationId": "BendMigrationController_storeEncryptionData",
        "summary": "Store bend migration data",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MigrationDataDTO"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        }
      }
    },
    "/api/v1/bendMigration/get": {
      "post": {
        "operationId": "BendMigrationController_getEncryptedData",
        "summary": "Get bend migration data",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EncryptionWalletSignatureDTO"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        }
      }
    },
    "/api/v1/bendMigration": {
      "delete": {
        "operationId": "BendMigrationController_deleteEncryptedData",
        "summary": "Delete bend migration data",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EncryptionWalletSignatureDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/api/v1/offramp/bridge/tos": {
      "post": {
        "operationId": "BridgeOfframpController_getTosLink",
        "summary": "Get ToS link",
        "parameters": [],
        "responses": {
          "201": {
            "description": ""
          }
        }
      }
    },
    "/api/v1/offramp/bridge/customers": {
      "post": {
        "operationId": "BridgeOfframpController_createCustomer",
        "summary": "Create customer",
        "parameters": [],
        "responses": {
          "201": {
            "description": ""
          }
        }
      }
    },
    "/api/v1/offramp/bridge/customers/{customerId}": {
      "get": {
        "operationId": "BridgeOfframpController_getCustomerId",
        "summary": "Get customer by ID",
        "parameters": [
          {
            "name": "customerId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/api/v1/offramp/bridge/customers/{customerId}/external_accounts/{externalAccountId}": {
      "get": {
        "operationId": "BridgeOfframpController_getExternalAccount",
        "summary": "Get external account by ID",
        "parameters": [
          {
            "name": "customerId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "externalAccountId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      },
      "put": {
        "operationId": "BridgeOfframpController_updateExternalAccount",
        "summary": "Update external account destination address",
        "parameters": [
          {
            "name": "customerId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "externalAccountId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/api/v1/offramp/bridge/customers/{customerId}/external_accounts": {
      "post": {
        "operationId": "BridgeOfframpController_createExternalAccount",
        "summary": "Create an external account",
        "parameters": [
          {
            "name": "customerId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": ""
          }
        }
      }
    },
    "/api/v1/offramp/bridge/transfers/{transferId}": {
      "get": {
        "operationId": "BridgeOfframpController_getTransfer",
        "summary": "Get transfer by ID",
        "parameters": [
          {
            "name": "transferId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/api/v1/offramp/bridge/user": {
      "get": {
        "operationId": "BridgeOfframpController_getUserData",
        "summary": "Get User Account Data",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/api/v1/offramp/bridge/transfers": {
      "post": {
        "operationId": "BridgeOfframpController_createTransfer",
        "summary": "Create transfer",
        "parameters": [],
        "responses": {
          "201": {
            "description": ""
          }
        }
      }
    },
    "/api/v1/buildersGarden/balances": {
      "get": {
        "operationId": "BuildersGardenController_fetchBalances",
        "summary": "Fetch Balances",
        "parameters": [
          {
            "name": "address",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "includeNativeBalance",
            "required": false,
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/api/v1/buildersGarden/send": {
      "post": {
        "operationId": "BuildersGardenController_send",
        "summary": "Send",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SendRequestDTO"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        }
      }
    },
    "/api/v1/buildersGarden/executeIntents": {
      "post": {
        "operationId": "BuildersGardenController_executeIntents",
        "summary": "Execute Intents",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExecuteIntentsRequestDTO"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        }
      }
    },
    "/api/v1/buildersGarden/getTransfers": {
      "post": {
        "operationId": "BuildersGardenController_getTransfers",
        "summary": "Get Transfers",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SendRequestDTO"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        }
      }
    },
    "/api/v1/cashramp/confirmTransaction": {
      "post": {
        "operationId": "CashrampController_confirmTransaction",
        "summary": "Confirm a transaction",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConfirmCashrampTransactionDTO"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        }
      }
    },
    "/alchemy/webhooks": {
      "post": {
        "operationId": "ChainMonitorController_webhook",
        "parameters": [],
        "responses": {
          "201": {
            "description": ""
          }
        }
      }
    },
    "/peanut/claim/optimism": {
      "post": {
        "operationId": "ClaimsController_claimOptimism",
        "summary": "Optimism Claim",
        "parameters": [],
        "responses": {
          "201": {
            "description": ""
          }
        }
      }
    },
    "/peanut/claim/base": {
      "post": {
        "operationId": "ClaimsController_claimBase",
        "summary": "Base Claim",
        "parameters": [],
        "responses": {
          "201": {
            "description": ""
          }
        }
      }
    },
    "/peanut/claim": {
      "post": {
        "operationId": "ClaimsController_claimLegacy",
        "summary": "Legacy Claim",
        "parameters": [],
        "responses": {
          "201": {
            "description": ""
          }
        }
      }
    },
    "/protocol/intentsForWithdrawing": {
      "get": {
        "operationId": "EcoProtocolController_getIntentsForWithdrawing",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/protocol/nextBatch": {
      "get": {
        "operationId": "EcoProtocolController_getNextBatch",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/protocol/fetchIntents": {
      "post": {
        "operationId": "EcoProtocolController_fetchIntents",
        "summary": "Fetch Intents",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FetchIntentsDTO"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        }
      }
    },
    "/api/v1/intents/balances": {
      "get": {
        "operationId": "IntentsController_fetchBalances",
        "summary": "Fetch Balances",
        "parameters": [
          {
            "name": "address",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "includeNativeBalance",
            "required": false,
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/api/v1/intents/pendingIntents": {
      "get": {
        "operationId": "IntentsController_getPendingIntents",
        "summary": "Query Pending Intents",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/api/v1/intents/queryIntents": {
      "post": {
        "operationId": "IntentsController_getIntentsForMerchant",
        "summary": "Query Intents",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BaseIntentsQueryDTO"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        }
      }
    },
    "/api/v1/intents/queryIntentsForUser": {
      "post": {
        "operationId": "IntentsController_getIntentsForUser",
        "summary": "Query Intents For User",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserIntentsQueryDTO"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        }
      }
    },
    "/api/v1/intents/executeIntent": {
      "post": {
        "operationId": "IntentsController_execute",
        "summary": "Execute Intent",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExecuteIntentRequestDTO"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        }
      }
    },
    "/api/v1/intents/getIntentFees": {
      "post": {
        "operationId": "IntentsController_getIntentFees",
        "summary": "Get Intent fees",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExecuteIntentRequestDTO"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        }
      }
    },
    "/api/v1/intents/vendingMachine/max": {
      "post": {
        "operationId": "IntentsController_getVendingMachineMaxUsdAmount",
        "summary": "Vending Machine Max USD Amount",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VendingMachineMaxRequestDTO"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        }
      }
    },
    "/api/v1/intents/maxAmount": {
      "post": {
        "operationId": "IntentsController_getMaxUsdAmount",
        "summary": "Max USD Amount",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MaxAmountBridgingAndSwapsRequestDTO"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        }
      }
    },
    "/api/v1/intents/receiveSignedUserOps": {
      "post": {
        "operationId": "IntentsController_receiveSignedUserOps",
        "summary": "Receive Signed UserOps",
        "parameters": [],
        "responses": {
          "201": {
            "description": ""
          }
        }
      }
    },
    "/api/v1/intents/inspect/{intentID}": {
      "get": {
        "operationId": "IntentsController_getIntentByID",
        "summary": "Get intent by its intentID",
        "parameters": [
          {
            "name": "intentID",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/api/v1/intents/usageTracking/numFreeIntents": {
      "get": {
        "operationId": "UsageTrackingController_getNumFreeIntentsForUser",
        "summary": "Get Num Free Intents",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/api/v1/intents/usageTracking/fees": {
      "get": {
        "operationId": "UsageTrackingController_getFeesForIntent",
        "summary": "Get Fees for an Intent",
        "parameters": [
          {
            "name": "intentType",
            "required": true,
            "in": "query",
            "schema": {
              "enum": [
                "SEND",
                "SHOPPING_SEND",
                "ADVANCED_SEND",
                "OFFRAMP_SEND",
                "MULTI_SEND",
                "ECO_PROTOCOL_SEND",
                "REGISTER_BEAM_NAME",
                "REGISTER_FREE_BEAM_NAME",
                "CREATE_BEAM_LINK",
                "CLAIM_BEAM_LINK",
                "ADVANCED_CREATE_BEAM_LINK",
                "ECO_VENDING_MACHINE"
              ],
              "type": "string"
            }
          },
          {
            "name": "token",
            "required": false,
            "in": "query",
            "schema": {
              "enum": [
                "ETH",
                "ECO",
                "ECOx",
                "OAK",
                "FTST",
                "OP",
                "USDC",
                "USDCe",
                "USDbC",
                "USDT",
                "USDV",
                "USDY",
                "baseUSDbC",
                "baseUSDC",
                "opUSDC",
                "opUSDCe",
                "opUSDT",
                "opUSDV",
                "USD"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/api/v1/intents/usageTracking/standardIntentFees": {
      "get": {
        "operationId": "UsageTrackingController_getStandardIntentFees",
        "summary": "Get Standard Intent Fees",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/api/v1/eoa/store": {
      "post": {
        "operationId": "EOAController_storeEncryptionData",
        "summary": "Store encrypted data",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StoreEOADataDTO"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        }
      }
    },
    "/api/v1/eoa/{owner}": {
      "get": {
        "operationId": "EOAController_getEncryptedData",
        "summary": "Get encrypted data",
        "parameters": [
          {
            "name": "owner",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/api/v1/farcaster/litSessionSig": {
      "get": {
        "operationId": "FarcasterController_getLitSessionSig",
        "summary": "Generate a lit session signature to encrypt/decrypt data",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/api/v1/farcaster/litAuthSig": {
      "get": {
        "operationId": "FarcasterController_getLitAuthSig",
        "summary": "Get authSig to encrypt/decrypt data",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/api/v1/farcaster/store": {
      "post": {
        "operationId": "FarcasterController_storeEncryptionData",
        "summary": "Store encrypted data",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StoreFarcasterDataDTO"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        }
      }
    },
    "/api/v1/farcaster/{fid}": {
      "get": {
        "operationId": "FarcasterController_getEncryptedData",
        "summary": "Get encrypted data",
        "parameters": [
          {
            "name": "fid",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/api/v1/health": {
      "get": {
        "operationId": "HealthCheckController_checkHealth",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/api/v1/history": {
      "post": {
        "operationId": "HistoryController_getWalletHistory",
        "summary": "Get history for address",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetHistoryDTO"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        }
      }
    },
    "/api/v1/merchants/loggedInMerchant": {
      "get": {
        "operationId": "MerchantsController_getLoggedInMerchant",
        "summary": "Get Logged In Merchant",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/api/v1/merchants/updateMerchant": {
      "patch": {
        "operationId": "MerchantsController_updateMerchant",
        "summary": "Update Merchant",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateMerchantDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/api/v1/mesh/managedAccountAuthentication/createLinkTokenForLoggedInUser": {
      "post": {
        "operationId": "ManagedAccountAuthenticationController_createLinkTokenForLoggedInUser",
        "summary": "Create Link Token",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateLinkTokenDTO"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        }
      }
    },
    "/api/v1/mesh/managedAccountAuthentication/integrationsList": {
      "get": {
        "operationId": "ManagedAccountAuthenticationController_getManagedTransfersNetworksList",
        "summary": "Get Integrations List",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/api/v1/mesh/managedTransfers/managedTransfersIntegrationsList": {
      "get": {
        "operationId": "ManagedTransfersController_getManagedTransfersIntegrationsList",
        "summary": "Get Managed Transfers Integrations List",
        "parameters": [
          {
            "name": "filterBrokers",
            "required": true,
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "filterNetworks",
            "required": true,
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "filterTokens",
            "required": true,
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/api/v1/mesh/managedTransfers/managedTransfersNetworksList": {
      "get": {
        "operationId": "ManagedTransfersController_getManagedTransfersNetworksList",
        "summary": "Get Managed Transfers Networks List",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/api/v1/notifi/getUser": {
      "get": {
        "operationId": "NotifiController_getNotifiUser",
        "summary": "Get Notifi User",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/api/v1/notifi/createUser": {
      "post": {
        "operationId": "NotifiController_addNotifiUser",
        "summary": "Add Notifi User",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateNotifiUserDTO"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        }
      }
    },
    "/api/v1/notifi/transfers/enable": {
      "post": {
        "operationId": "NotifiController_enableNotifiSubscriptionForTransfers",
        "summary": "Enable notifications for transfers",
        "parameters": [],
        "responses": {
          "201": {
            "description": ""
          }
        }
      }
    },
    "/api/v1/notifi/transfers/disable": {
      "post": {
        "operationId": "NotifiController_disableNotifiSubscriptionForTransfers",
        "summary": "Disable notifications for transfers",
        "parameters": [],
        "responses": {
          "201": {
            "description": ""
          }
        }
      }
    },
    "/api/v1/ofac/sanctionedEntities": {
      "post": {
        "operationId": "OFACController_getSanctionedEntities",
        "summary": "Query OFAC Sanctioned Entities",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OFACSanctionedEntitiesDTO"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        }
      }
    },
    "/paymaster/fees": {
      "get": {
        "operationId": "PaymasterController_getFeeList",
        "summary": "Get Flat Fees Data",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/paymaster/{network}": {
      "post": {
        "operationId": "PaymasterController_execute",
        "summary": "Network",
        "parameters": [
          {
            "name": "network",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": ""
          }
        }
      }
    },
    "/api/v1/profileImages/uploadurl": {
      "post": {
        "operationId": "ProfileImagesController_getProfileImageUploadUrl",
        "summary": "Get a profile image upload URL",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetProfileImageUploadDataDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The profile image url and associated data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentUploadData"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/relayer/delegate": {
      "post": {
        "operationId": "RelayerController_delegateRequest",
        "summary": "Delegate",
        "parameters": [],
        "responses": {
          "201": {
            "description": ""
          }
        }
      }
    },
    "/api/v1/userAddresses": {
      "get": {
        "operationId": "UserAddressesController_getAddressesForLoggedInUser",
        "summary": "Get Addresses For User",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/api/v1/userAddresses/addUserAddress": {
      "post": {
        "operationId": "UserAddressesController_addAddressForLoggedInUser",
        "summary": "Add User Address",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUserAddressDTO"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        }
      }
    },
    "/api/v1/userAddresses/updateUserAddress": {
      "patch": {
        "operationId": "UserAddressesController_updateAddressForLoggedInUser",
        "summary": "Update User Address",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUserAddressDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/api/v1/users/isShoppingWaitListed/{address}": {
      "get": {
        "operationId": "UsersController_isUserShoppingWaitListed",
        "summary": "Check if User Shopping WaitListed",
        "parameters": [
          {
            "name": "address",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/api/v1/users/setShoppingWaitListed/{address}": {
      "post": {
        "operationId": "UsersController_setUserShoppingWaitListed",
        "summary": "Set User Shopping WaitListed.",
        "parameters": [
          {
            "name": "address",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": ""
          }
        }
      }
    },
    "/api/v1/users/loggedInUserInfo": {
      "get": {
        "operationId": "UsersController_getLoggedInUserInfo",
        "summary": "Get Logged In User Info.",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/api/v1/users/checkFlagsSet": {
      "get": {
        "operationId": "UsersController_checkFlagsSet",
        "summary": "Check if User Flags Set.",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/api/v1/users/checkFlagsNotSet": {
      "get": {
        "operationId": "UsersController_checkFlagsNotSet",
        "summary": "Check if User Flags are Not Set.",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/api/v1/users/setFlags": {
      "patch": {
        "operationId": "UsersController_setFlags",
        "summary": "Set User Flags.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUserFlagsDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/api/v1/users/removeFlags": {
      "patch": {
        "operationId": "UsersController_removeFlags",
        "summary": "Remove User Flags.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUserFlagsDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/api/v1/users/saveUserData": {
      "post": {
        "operationId": "UsersController_saveUserData",
        "summary": "Save User Data",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserDataDTO"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        }
      }
    },
    "/api/v1/users/saveOrUpdateUserData": {
      "post": {
        "operationId": "UsersController_saveOrUpdateUserData",
        "summary": "Save Or Update User Data",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserDataDTO"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        }
      }
    },
    "/api/v1/users/setAuthMethod": {
      "patch": {
        "operationId": "UsersController_setAuthMethod",
        "summary": "Set Auth Method",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SetAuthMethodDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/api/v1/users/markBendMigrationComplete": {
      "post": {
        "operationId": "UsersController_markBendMigrationComplete",
        "summary": "Mark Bend Migration Complete",
        "parameters": [],
        "responses": {
          "201": {
            "description": ""
          }
        }
      }
    },
    "/api/v1/users/updateEmail": {
      "post": {
        "operationId": "UsersController_updateEmail",
        "summary": "Update Email",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateEmailDTO"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        }
      }
    },
    "/api/v1/users/isUserAddressSavedAlready/{address}": {
      "get": {
        "operationId": "UsersController_isUserAddressSavedAlready",
        "summary": "Check if User Address Already Saved",
        "parameters": [
          {
            "name": "address",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/api/v1/users/isTwitterEmailSavedAlready/{email}": {
      "get": {
        "operationId": "UsersController_isTwitterEmailSavedAlready",
        "summary": "Check if Twitter Email Already Saved",
        "parameters": [
          {
            "name": "email",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/api/v1/users/isUserEmailSavedAlready/{email}": {
      "get": {
        "operationId": "UsersController_isUserEmailSavedAlready",
        "summary": "Check if User Email Already Saved",
        "parameters": [
          {
            "name": "email",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/api/v1/users/isTwitterUserSavedAlready": {
      "get": {
        "operationId": "UsersController_isUserTwitterSavedAlready",
        "summary": "Check if Twitter User Already Saved",
        "parameters": [
          {
            "name": "id",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "handle",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "email",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/api/v1/users/jwt": {
      "post": {
        "operationId": "UsersController_issueJWT",
        "summary": "Issue JWT with wallet address",
        "parameters": [],
        "responses": {
          "201": {
            "description": ""
          }
        }
      }
    }
  },
  "info": {
    "title": "api",
    "description": "Relayoor API Description",
    "version": "1.0",
    "contact": {

    }
  },
  "tags": [
    {
      "name": "api",
      "description": ""
    }
  ],
  "servers": [],
  "components": {
    "schemas": {
      "AdminAddBeamableWalletDTO": {
        "type": "object",
        "properties": {
          "assetHolder": {
            "type": "string"
          },
          "eoaSigningAddress": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "emoji": {
            "type": "string"
          },
          "userID": {
            "type": "string"
          },
          "smartContractWalletAddress": {
            "type": "string"
          }
        },
        "required": [
          "assetHolder",
          "eoaSigningAddress",
          "userID",
          "smartContractWalletAddress"
        ]
      },
      "AddBeamableWalletDTO": {
        "type": "object",
        "properties": {
          "assetHolder": {
            "type": "string"
          },
          "eoaSigningAddress": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "emoji": {
            "type": "string"
          }
        },
        "required": [
          "assetHolder",
          "eoaSigningAddress"
        ]
      },
      "BeamableWalletUpdatesDTO": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "emoji": {
            "type": "string"
          }
        }
      },
      "UpdateBeamableWalletDTO": {
        "type": "object",
        "properties": {
          "updates": {
            "$ref": "#/components/schemas/BeamableWalletUpdatesDTO"
          }
        },
        "required": [
          "updates"
        ]
      },
      "DeleteBeamableWalletDTO": {
        "type": "object",
        "properties": {
          "assetHolder": {
            "type": "string"
          }
        },
        "required": [
          "assetHolder"
        ]
      },
      "TriggerWebhookDTO": {
        "type": "object",
        "properties": {
          "index": {
            "type": "string"
          }
        },
        "required": [
          "index"
        ]
      },
      "MigrationDataDTO": {
        "type": "object",
        "properties": {

        }
      },
      "EncryptionWalletSignatureDTO": {
        "type": "object",
        "properties": {

        }
      },
      "BridgeOfframpUpdateAccountDataDTO": {
        "type": "object",
        "properties": {
          "userID": {
            "type": "string"
          },
          "bridgeOfframpCustomerID": {
            "type": "string"
          },
          "bridgeOfframpExternalAccountID": {
            "type": "string"
          }
        },
        "required": [
          "userID"
        ]
      },
      "SendRequestDTO": {
        "type": "object",
        "properties": {
          "dAppID": {
            "type": "string"
          },
          "sender": {
            "type": "string"
          },
          "recipient": {
            "type": "string"
          },
          "destinationNetwork": {
            "type": "string",
            "enum": [
              "SEPOLIA",
              "OPTIMISM_SEPOLIA",
              "BASE_SEPOLIA",
              "ARBITRUM_SEPOLIA",
              "POLYGON_TESTNET",
              "ABSTRACT_TESTNET",
              "OPTIMISM",
              "BASE",
              "ARBITRUM",
              "MANTLE",
              "POLYGON",
              "CELO",
              "ABSTRACT",
              "MANTLE_SEPOLIA",
              "ETHEREUM",
              "ECO_NET",
              "ECO_TEST_NET",
              "BASE_MAINNET",
              "OPTIMISM_MAINNET",
              "INK",
              "UNICHAIN"
            ]
          },
          "destinationToken": {
            "type": "string",
            "enum": [
              "ETH",
              "ECO",
              "ECOx",
              "OAK",
              "FTST",
              "OP",
              "USDC",
              "USDCe",
              "USDbC",
              "USDT",
              "USDV",
              "USDY",
              "baseUSDbC",
              "baseUSDC",
              "opUSDC",
              "opUSDCe",
              "opUSDT",
              "opUSDV",
              "USD"
            ]
          },
          "transferAmount": {
            "type": "string"
          },
          "requestedTransfers": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "dAppID",
          "sender",
          "recipient",
          "destinationNetwork",
          "destinationToken",
          "transferAmount"
        ]
      },
      "ExecuteIntentsRequestDTO": {
        "type": "object",
        "properties": {
          "requestID": {
            "type": "string"
          },
          "permit3Signature": {
            "type": "string"
          }
        },
        "required": [
          "requestID",
          "permit3Signature"
        ]
      },
      "SetupAllowancesDTO": {
        "type": "object",
        "properties": {
          "owner": {
            "type": "string"
          },
          "privateKey": {
            "type": "string"
          },
          "chainAllowances": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "owner",
          "privateKey",
          "chainAllowances"
        ]
      },
      "ConfirmCashrampTransactionDTO": {
        "type": "object",
        "properties": {
          "paymentRequest": {
            "type": "string"
          },
          "transactionHash": {
            "type": "number"
          }
        },
        "required": [
          "paymentRequest",
          "transactionHash"
        ]
      },
      "GetMonitoredAddressesOptionsDTO": {
        "type": "object",
        "properties": {
          "limit": {
            "type": "number"
          },
          "pageKey": {
            "type": "string"
          }
        }
      },
      "GetMonitoredAddressesDTO": {
        "type": "object",
        "properties": {
          "network": {
            "type": "string",
            "enum": [
              "SEPOLIA",
              "OPTIMISM_SEPOLIA",
              "BASE_SEPOLIA",
              "ARBITRUM_SEPOLIA",
              "POLYGON_TESTNET",
              "ABSTRACT_TESTNET",
              "OPTIMISM",
              "BASE",
              "ARBITRUM",
              "MANTLE",
              "POLYGON",
              "CELO",
              "ABSTRACT",
              "MANTLE_SEPOLIA",
              "ETHEREUM",
              "ECO_NET",
              "ECO_TEST_NET",
              "BASE_MAINNET",
              "OPTIMISM_MAINNET",
              "INK",
              "UNICHAIN"
            ]
          },
          "webHookID": {
            "type": "string"
          },
          "options": {
            "$ref": "#/components/schemas/GetMonitoredAddressesOptionsDTO"
          }
        },
        "required": [
          "network",
          "webHookID"
        ]
      },
      "RemoveMonitoredAddressesDTO": {
        "type": "object",
        "properties": {
          "network": {
            "type": "string",
            "enum": [
              "SEPOLIA",
              "OPTIMISM_SEPOLIA",
              "BASE_SEPOLIA",
              "ARBITRUM_SEPOLIA",
              "POLYGON_TESTNET",
              "ABSTRACT_TESTNET",
              "OPTIMISM",
              "BASE",
              "ARBITRUM",
              "MANTLE",
              "POLYGON",
              "CELO",
              "ABSTRACT",
              "MANTLE_SEPOLIA",
              "ETHEREUM",
              "ECO_NET",
              "ECO_TEST_NET",
              "BASE_MAINNET",
              "OPTIMISM_MAINNET",
              "INK",
              "UNICHAIN"
            ]
          },
          "webHookID": {
            "type": "string"
          },
          "addresses": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "network",
          "webHookID",
          "addresses"
        ]
      },
      "ChainMonitorWebHooksQueryDTO": {
        "type": "object",
        "properties": {
          "network": {
            "type": "string",
            "enum": [
              "SEPOLIA",
              "OPTIMISM_SEPOLIA",
              "BASE_SEPOLIA",
              "ARBITRUM_SEPOLIA",
              "POLYGON_TESTNET",
              "ABSTRACT_TESTNET",
              "OPTIMISM",
              "BASE",
              "ARBITRUM",
              "MANTLE",
              "POLYGON",
              "CELO",
              "ABSTRACT",
              "MANTLE_SEPOLIA",
              "ETHEREUM",
              "ECO_NET",
              "ECO_TEST_NET",
              "BASE_MAINNET",
              "OPTIMISM_MAINNET",
              "INK",
              "UNICHAIN"
            ]
          },
          "webHookBaseUrl": {
            "type": "string"
          }
        },
        "required": [
          "network"
        ]
      },
      "GetQueueJobsDTO": {
        "type": "object",
        "properties": {
          "queueName": {
            "type": "string"
          },
          "jobName": {
            "type": "string"
          },
          "statuses": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "queueName"
        ]
      },
      "DataFieldFilterDTO": {
        "type": "object",
        "properties": {
          "fieldName": {
            "type": "string"
          },
          "fieldValue": {
            "type": "string"
          },
          "jobName": {
            "type": "string"
          }
        },
        "required": [
          "fieldName",
          "fieldValue"
        ]
      },
      "RemoveQueueJobsDTO": {
        "type": "object",
        "properties": {
          "queueName": {
            "type": "string"
          },
          "jobIDs": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "jobNames": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "statuses": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "dataFieldFilter": {
            "$ref": "#/components/schemas/DataFieldFilterDTO"
          }
        },
        "required": [
          "queueName"
        ]
      },
      "InitializeGlobalConfigDTO": {
        "type": "object",
        "properties": {
          "currentBendAppVersion": {
            "type": "string"
          }
        }
      },
      "UpdateGlobalConfigDTO": {
        "type": "object",
        "properties": {
          "currentBendAppVersion": {
            "type": "string"
          }
        }
      },
      "ResetFailedRefundsDTO": {
        "type": "object",
        "properties": {
          "ecoIntentIDs": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "ecoIntentIDs"
        ]
      },
      "FetchIntentsDTO": {
        "type": "object",
        "properties": {
          "intentHashes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "intentHashes"
        ]
      },
      "IntentsQueryDTO": {
        "type": "object",
        "properties": {
          "sort": {
            "type": "object"
          },
          "sortOrder": {
            "type": "string"
          },
          "pageNumber": {
            "type": "object"
          },
          "pageSize": {
            "type": "object"
          },
          "projection": {
            "type": "object"
          },
          "startDate": {
            "type": "object"
          },
          "endDate": {
            "type": "object"
          },
          "softDeleteOptionsDTO": {
            "type": "object"
          },
          "state": {
            "type": "string",
            "enum": [
              "INTENT_RECEIVED",
              "INTENT_AWAITING_USER_OP_SIGNATURES",
              "INTENT_USER_OPS_SIGNED",
              "INTENT_QUEUED",
              "INTENT_CREATED",
              "INTENT_INITIATING",
              "INTENT_INITIATION_FAILED",
              "INTENT_PENDING",
              "INTENT_COMPLETED",
              "INTENT_FAILED"
            ]
          },
          "intentID": {
            "type": "string"
          },
          "userID": {
            "type": "string"
          },
          "idempotentID": {
            "type": "string"
          },
          "intentType": {
            "type": "string",
            "enum": [
              "SEND",
              "SHOPPING_SEND",
              "ADVANCED_SEND",
              "OFFRAMP_SEND",
              "MULTI_SEND",
              "ECO_PROTOCOL_SEND",
              "REGISTER_BEAM_NAME",
              "REGISTER_FREE_BEAM_NAME",
              "CREATE_BEAM_LINK",
              "CLAIM_BEAM_LINK",
              "ADVANCED_CREATE_BEAM_LINK",
              "ECO_VENDING_MACHINE"
            ]
          },
          "includeFlags": {
            "type": "string",
            "enum": [
              "FEE_FREE"
            ]
          },
          "excludeFlags": {
            "type": "string",
            "enum": [
              "FEE_FREE"
            ]
          }
        }
      },
      "BaseIntentsQueryDTO": {
        "type": "object",
        "properties": {
          "sort": {
            "type": "object"
          },
          "sortOrder": {
            "type": "string"
          },
          "pageNumber": {
            "type": "object"
          },
          "pageSize": {
            "type": "object"
          },
          "projection": {
            "type": "object"
          },
          "startDate": {
            "type": "object"
          },
          "endDate": {
            "type": "object"
          },
          "softDeleteOptionsDTO": {
            "type": "object"
          },
          "state": {
            "type": "string",
            "enum": [
              "INTENT_RECEIVED",
              "INTENT_AWAITING_USER_OP_SIGNATURES",
              "INTENT_USER_OPS_SIGNED",
              "INTENT_QUEUED",
              "INTENT_CREATED",
              "INTENT_INITIATING",
              "INTENT_INITIATION_FAILED",
              "INTENT_PENDING",
              "INTENT_COMPLETED",
              "INTENT_FAILED"
            ]
          }
        }
      },
      "UserIntentsQueryDTO": {
        "type": "object",
        "properties": {
          "sort": {
            "type": "object"
          },
          "sortOrder": {
            "type": "string"
          },
          "pageNumber": {
            "type": "object"
          },
          "pageSize": {
            "type": "object"
          },
          "projection": {
            "type": "object"
          },
          "startDate": {
            "type": "object"
          },
          "endDate": {
            "type": "object"
          },
          "softDeleteOptionsDTO": {
            "type": "object"
          },
          "intentID": {
            "type": "string"
          }
        }
      },
      "IntentRequestPayloadDTO": {
        "type": "object",
        "properties": {
          "walletAddress": {
            "type": "string"
          },
          "ownerAddress": {
            "type": "string"
          },
          "dryRun": {
            "type": "boolean"
          }
        },
        "required": [
          "walletAddress",
          "ownerAddress"
        ]
      },
      "ExecuteIntentRequestDTO": {
        "type": "object",
        "properties": {
          "intentType": {
            "type": "string",
            "enum": [
              "SEND",
              "SHOPPING_SEND",
              "ADVANCED_SEND",
              "OFFRAMP_SEND",
              "MULTI_SEND",
              "ECO_PROTOCOL_SEND",
              "REGISTER_BEAM_NAME",
              "REGISTER_FREE_BEAM_NAME",
              "CREATE_BEAM_LINK",
              "CLAIM_BEAM_LINK",
              "ADVANCED_CREATE_BEAM_LINK",
              "ECO_VENDING_MACHINE"
            ]
          },
          "idempotentID": {
            "type": "string"
          },
          "payload": {
            "$ref": "#/components/schemas/IntentRequestPayloadDTO"
          }
        },
        "required": [
          "intentType",
          "idempotentID",
          "payload"
        ]
      },
      "VendingMachineMaxRequestDTO": {
        "type": "object",
        "properties": {
          "walletAddress": {
            "type": "string"
          }
        },
        "required": [
          "walletAddress"
        ]
      },
      "MaxAmountBridgingAndSwapsRequestDTO": {
        "type": "object",
        "properties": {
          "walletAddress": {
            "type": "string"
          },
          "network": {
            "type": "string",
            "enum": [
              "SEPOLIA",
              "OPTIMISM_SEPOLIA",
              "BASE_SEPOLIA",
              "ARBITRUM_SEPOLIA",
              "POLYGON_TESTNET",
              "ABSTRACT_TESTNET",
              "OPTIMISM",
              "BASE",
              "ARBITRUM",
              "MANTLE",
              "POLYGON",
              "CELO",
              "ABSTRACT",
              "MANTLE_SEPOLIA",
              "ETHEREUM",
              "ECO_NET",
              "ECO_TEST_NET",
              "BASE_MAINNET",
              "OPTIMISM_MAINNET",
              "INK",
              "UNICHAIN"
            ]
          },
          "token": {
            "type": "string",
            "enum": [
              "ETH",
              "ECO",
              "ECOx",
              "OAK",
              "FTST",
              "OP",
              "USDC",
              "USDCe",
              "USDbC",
              "USDT",
              "USDV",
              "USDY",
              "baseUSDbC",
              "baseUSDC",
              "opUSDC",
              "opUSDCe",
              "opUSDT",
              "opUSDV",
              "USD"
            ]
          }
        },
        "required": [
          "walletAddress",
          "network",
          "token"
        ]
      },
      "AddUserOpCompletionMonitorDTO": {
        "type": "object",
        "properties": {
          "completionCheckType": {
            "type": "string",
            "enum": [
              "ADDRESS_BALANCE",
              "TRANSACTION_HASH",
              "NOP"
            ]
          },
          "userOpID": {
            "type": "string"
          },
          "network": {
            "type": "string",
            "enum": [
              "SEPOLIA",
              "OPTIMISM_SEPOLIA",
              "BASE_SEPOLIA",
              "ARBITRUM_SEPOLIA",
              "POLYGON_TESTNET",
              "ABSTRACT_TESTNET",
              "OPTIMISM",
              "BASE",
              "ARBITRUM",
              "MANTLE",
              "POLYGON",
              "CELO",
              "ABSTRACT",
              "MANTLE_SEPOLIA",
              "ETHEREUM",
              "ECO_NET",
              "ECO_TEST_NET",
              "BASE_MAINNET",
              "OPTIMISM_MAINNET",
              "INK",
              "UNICHAIN"
            ]
          },
          "address": {
            "type": "string"
          },
          "blockNumber": {
            "type": "string"
          }
        },
        "required": [
          "completionCheckType"
        ]
      },
      "SetUserOpExecutionCompletedDTO": {
        "type": "object",
        "properties": {
          "userID": {
            "type": "string"
          },
          "intentID": {
            "type": "string"
          },
          "userOpID": {
            "type": "string"
          }
        },
        "required": [
          "userID",
          "intentID",
          "userOpID"
        ]
      },
      "TransactionLimits": {
        "type": "object",
        "properties": {
          "maxDailyLimit": {
            "type": "string"
          },
          "maxWeeklyLimit": {
            "type": "string"
          },
          "maxMonthlyLimit": {
            "type": "string"
          }
        },
        "required": [
          "maxMonthlyLimit"
        ]
      },
      "AddDefaultFreeIntentLimitsDTO": {
        "type": "object",
        "properties": {
          "intentType": {
            "type": "string",
            "enum": [
              "SEND",
              "SHOPPING_SEND",
              "ADVANCED_SEND",
              "OFFRAMP_SEND",
              "MULTI_SEND",
              "ECO_PROTOCOL_SEND",
              "REGISTER_BEAM_NAME",
              "REGISTER_FREE_BEAM_NAME",
              "CREATE_BEAM_LINK",
              "CLAIM_BEAM_LINK",
              "ADVANCED_CREATE_BEAM_LINK",
              "ECO_VENDING_MACHINE"
            ]
          },
          "transactionLimits": {
            "$ref": "#/components/schemas/TransactionLimits"
          }
        },
        "required": [
          "intentType",
          "transactionLimits"
        ]
      },
      "UpdateTransactionLimitsDTO": {
        "type": "object",
        "properties": {
          "maxDailyLimit": {
            "type": "string"
          },
          "maxWeeklyLimit": {
            "type": "string"
          },
          "maxMonthlyLimit": {
            "type": "string"
          }
        }
      },
      "UpdateDefaultFreeIntentLimitsDTO": {
        "type": "object",
        "properties": {
          "intentType": {
            "type": "string",
            "enum": [
              "SEND",
              "SHOPPING_SEND",
              "ADVANCED_SEND",
              "OFFRAMP_SEND",
              "MULTI_SEND",
              "ECO_PROTOCOL_SEND",
              "REGISTER_BEAM_NAME",
              "REGISTER_FREE_BEAM_NAME",
              "CREATE_BEAM_LINK",
              "CLAIM_BEAM_LINK",
              "ADVANCED_CREATE_BEAM_LINK",
              "ECO_VENDING_MACHINE"
            ]
          },
          "transactionLimits": {
            "$ref": "#/components/schemas/UpdateTransactionLimitsDTO"
          }
        },
        "required": [
          "intentType",
          "transactionLimits"
        ]
      },
      "UpdateFreeIntentLimitsDTO": {
        "type": "object",
        "properties": {
          "intentType": {
            "type": "string",
            "enum": [
              "SEND",
              "SHOPPING_SEND",
              "ADVANCED_SEND",
              "OFFRAMP_SEND",
              "MULTI_SEND",
              "ECO_PROTOCOL_SEND",
              "REGISTER_BEAM_NAME",
              "REGISTER_FREE_BEAM_NAME",
              "CREATE_BEAM_LINK",
              "CLAIM_BEAM_LINK",
              "ADVANCED_CREATE_BEAM_LINK",
              "ECO_VENDING_MACHINE"
            ]
          },
          "transactionLimits": {
            "$ref": "#/components/schemas/UpdateTransactionLimitsDTO"
          },
          "userID": {
            "type": "string"
          }
        },
        "required": [
          "intentType",
          "transactionLimits",
          "userID"
        ]
      },
      "LogMessageParamsDTO": {
        "type": "object",
        "properties": {
          "sender": {
            "type": "string"
          },
          "args": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "sender",
          "args"
        ]
      },
      "LogErrorParamsDTO": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          },
          "error": {
            "type": "string",
            "enum": [
              "ClaimsServiceError",
              "RelayServiceError",
              "PaymasterServiceError",
              "VerifyingPaymasterServiceError",
              "SubgraphServiceError",
              "MerchantsServiceError",
              "UsersServiceError",
              "UserFlagsServiceError",
              "OFACServiceError",
              "IntentsServiceError",
              "IntentsExecutionServiceError",
              "UserOpsServiceError",
              "UserOpsServiceNonceError",
              "BundlerClientError",
              "ChainMonitorServiceError",
              "UserOpExecutionServiceError",
              "UserOpExecutionMonitorServiceError",
              "BridgeOfframpServiceError",
              "UserAddressesServiceError",
              "FreeIntentLimitsServiceError",
              "FeesServiceError",
              "BeamableWalletsServiceError",
              "AppVersionServiceError",
              "MeshServiceError",
              "MissingIdempotentID",
              "NotifiServiceError",
              "TokenBalancesServiceError",
              "AssetTransfersServiceError",
              "EcoProtocolServiceError",
              "EOAServiceError",
              "EOADataNotFound",
              "EOAValidationError",
              "FarcasterServiceError",
              "FarcasterDataNotFound",
              "FarcasterValidationError",
              "HistoryServiceError",
              "EncryptedDataServiceError",
              "EncryptedDataSignatureExpired",
              "EncryptedDataInvalidSignature",
              "NetworkNotSet",
              "InvalidRecipientAddress",
              "InvalidDeposit",
              "TokenNotAllowed",
              "PeanutClaimFailed",
              "UnableToClaimTokens",
              "InvalidDelegateData",
              "InvalidExecutionObject",
              "InvalidSenderAddress",
              "InvalidRValue",
              "InvalidSValue",
              "InvalidVValue",
              "OwnerNotValidAddress",
              "OwnerCannotBeAddressZero",
              "SpenderNotValidAddress",
              "ValueNotValidNumber",
              "ValueMustBeMaxUint256",
              "SpenderMustBePermit2Address",
              "GaslessTransactionsAlreadyEnabled",
              "OnlyECOTransfersAreAllowedGaslessly",
              "InvalidConditionType",
              "InvalidToCall",
              "InvalidData",
              "InvalidAddress",
              "FromAddressInvalid",
              "ToAddressInvalid",
              "InvalidSignature",
              "InvalidTokensObject",
              "InvalidConditionsObject",
              "InvalidOperationsObject",
              "CannotUseDifferentSponsorContract",
              "OnlyECOTokenTransfersAreSponsored",
              "PaymentMustBeAtLeast5ECOTokens",
              "PaymentMustBeInECOTokens",
              "InvalidNonce",
              "NonceMustBePositiveInteger",
              "InvalidPermitDetails",
              "InvalidRequestBody",
              "InvalidSponsorAddress",
              "OnlyDelegationsToTheEcollectiveAreSponsored",
              "ExpirationExceedsLimit",
              "PermitHasExpired",
              "AlreadyDelegatingToEcollective",
              "FlatFeeTransferRequired",
              "FeeTokenMustBeSameAsTransferToken",
              "UserOpsCannotBeFromDifferentSenders",
              "UnpaidFeeOnAnotherChain",
              "OnlyFeePayingTokenTransfersAllowedGaslessly",
              "TxIsNotEligibleForFreeService",
              "InvalidBundlerURL",
              "CouldNotSendUserOpToBundler",
              "InvalidPaymasterContext",
              "UnsupportedPaymasterMethod",
              "InvalidNetwork",
              "BendPaymasterError",
              "PimlicoPaymasterError",
              "InvalidFlatFee",
              "InvalidFlatFeeRecipient",
              "InvalidTokenApprovalForBeamNames",
              "BeamNameRegistrationTransactionFeeMustBePaidInEcoTokens",
              "InvalidTokenApprovalForPeanutNames",
              "InvalidTransaction",
              "InvalidTokenApprovalForStaticMarket",
              "CoinGeckoNoPriceDataFoTokens",
              "InvalidObject",
              "InvalidTokenAddress",
              "InvalidAmount",
              "AmountExceedsLimit",
              "AmountMustBeNonZero",
              "ServiceTemporarilyUnavailable",
              "SubtreeProofCountOverflow",
              "FollowingHashesCountOverflow",
              "InvalidLeafsPerSubtree",
              "InvalidLeafIndex",
              "HasPreHashButEmptyNodes",
              "InvalidNodeArrayLength",
              "InconsistentPreHashFlag",
              "MultiCallFailed",
              "Permit3ContractNotAvailableForChain",
              "InvalidMerkleRoot",
              "UnsupportedChainID",
              "InvalidProofData",
              "SendPermitError",
              "InvalidRequestID",
              "UnsupportedTokenForNetwork",
              "AlchemyWebhookInvalidSignature",
              "AlchemyWebhookInvalid",
              "EcoProtocolWebhookError",
              "EcoProtocolRetryError",
              "EcoProtocolProverNotFoundError",
              "TxRecipientError",
              "ErrorFetchingAddress",
              "DepositValidationFailed",
              "WithdrawalValidationFailed",
              "ErrorAccessingInputs",
              "ContractCallNotAllowed",
              "HTTPRequestError",
              "Permit2InitError",
              "Permit2TransferError",
              "SendUserOpFailed",
              "ErrorCheckingPrimaryDelegatee",
              "DelegateError",
              "MultiSendError",
              "SponsorTransferError",
              "DecodeFunctionError",
              "DBCreateIndexesError",
              "CoinGeckoGetTokenPriceError",
              "TransactionPostingError",
              "InvalidDate",
              "ErrorSendingBeamWebhook",
              "ReportClaimError",
              "SaveUserError",
              "InvalidMerchantUpdateRequest",
              "NoSuchMerchant",
              "AddSanctionedEntityError",
              "SanctionedEntitiesDisallowed",
              "NoSuchUser",
              "InvalidTwitterUserQuery",
              "InvalidImageTypeForProfilePicture",
              "CannotSetLogLevel",
              "FetchBalancesError",
              "UnknownIntentType",
              "UnknownSendIntentType",
              "UnknownCreateBeamLinkIntentType",
              "DuplicateIntent",
              "NoSuchIntent",
              "NoNextUserOp",
              "NoSuchUserOp",
              "InvalidUserOpCompletionCheckType",
              "NonMatchingUserOP",
              "InsufficientFundsInWallet",
              "InsufficientFundsForFeeTransfers",
              "InsufficientFundsToExecuteIntent",
              "DepositEventNotFound",
              "NoDepositsFoundForBeamLink",
              "InvalidUserOpCompletionMonitorRequest",
              "TokenRequiredForFeeCalculation",
              "IntentAlreadyExecuted",
              "IntentsExecutionDebuggingEnabled",
              "IntentNotFound",
              "UserOpNotReadyToExecute",
              "UserOpExpired",
              "BeamNameInvalid",
              "BeamNameAlreadyRegistered",
              "NoWebhooksForNetwork",
              "InvalidWebhookID",
              "FeeAlreadyExists",
              "FreeIntentLimitsAlreadyExist",
              "FreeIntentLimitsNotFound",
              "InvalidFreeIntentLimitType",
              "NoSuchQueue",
              "SubscriptionAlreadyExists",
              "SignatureExpired",
              "SignatureMustBeString",
              "InvalidSignatureData",
              "InvalidWalletSigner",
              "TypedDataVerificationFailed",
              "QUOTER_ADDRESS_NOT_DEFINED",
              "SWAP_ROUTER_ADDRESS_NOT_DEFINED",
              "SwapError",
              "SwapNotConfigured",
              "NoSwapsOrBridgingRequired",
              "InsufficientFundsToBuyEco",
              "NoBridgingResponse",
              "SwapsAndBridgingAnalyzerError",
              "ExchangeRateDataNotFound",
              "InvalidOfframp",
              "InsufficientFunds",
              "TransferError",
              "NoBridgingServiceAvailable",
              "InsufficientFundsForBridging",
              "MoreThanOneTokenTransferred",
              "InvalidUserFlag",
              "InvalidFlagsQuery",
              "DuplicateAddressEntry",
              "DuplicateWalletEntry",
              "NoSuchBeamableWallet",
              "SystemWalletInsufficientBalanceForToken",
              "SystemWalletBalanceBelowThreshold",
              "InvalidUpdateRequest",
              "InvalidQueryParams",
              "NotifiUserDoesNotExist",
              "NotifiUserAlreadyAdded",
              "DuplicateNotifiUserEntry",
              "NotifiUserAlreadySubscribed",
              "NotifiUserNotSubscribed",
              "NotifiAlertCreationError",
              "MeshTransferTokenMustBeSpecified",
              "MeshTransferNetworkMustBeSpecified",
              "MeshTransferTokenNotAllowed",
              "MeshTransferNetworkNotAllowed",
              "MeshDuplicateTransaction",
              "AppVersionValidationError",
              "DynamicConfigNotInitialized",
              "DynamicConfigError",
              "UnknownLDFlag",
              "WatchEventUnsubscribeError",
              "WatchEventNoUnsubscribeError",
              "WatchEventUnsubscribeFromError",
              "WebsocketUnsupportedChainError",
              "BuildersGardenServiceError",
              "QuoteError"
            ]
          }
        },
        "required": [
          "message",
          "error"
        ]
      },
      "SetLoggingLevelDTO": {
        "type": "object",
        "properties": {
          "logLevel": {
            "type": "string",
            "enum": [
              "VERBOSE",
              "DEBUG",
              "LOG",
              "WARN",
              "ERROR",
              "FATAL"
            ]
          }
        },
        "required": [
          "logLevel"
        ]
      },
      "EncryptedDataDTO": {
        "type": "object",
        "properties": {

        }
      },
      "EOAUserDataDTO": {
        "type": "object",
        "properties": {
          "walletAddress": {
            "type": "string"
          },
          "ownerAddress": {
            "type": "string"
          }
        },
        "required": [
          "walletAddress",
          "ownerAddress"
        ]
      },
      "EOASignatureDTO": {
        "type": "object",
        "properties": {

        }
      },
      "StoreEOADataDTO": {
        "type": "object",
        "properties": {
          "encryptedData": {
            "$ref": "#/components/schemas/EncryptedDataDTO"
          },
          "userData": {
            "$ref": "#/components/schemas/EOAUserDataDTO"
          },
          "signatureData": {
            "$ref": "#/components/schemas/EOASignatureDTO"
          }
        },
        "required": [
          "encryptedData",
          "userData",
          "signatureData"
        ]
      },
      "FarcasterUserDataDTO": {
        "type": "object",
        "properties": {
          "custody": {
            "type": "string"
          },
          "displayName": {
            "type": "string"
          },
          "username": {
            "type": "string"
          }
        },
        "required": [
          "custody",
          "displayName",
          "username"
        ]
      },
      "SiweDTO": {
        "type": "object",
        "properties": {

        }
      },
      "StoreFarcasterDataDTO": {
        "type": "object",
        "properties": {
          "encryptedData": {
            "$ref": "#/components/schemas/EncryptedDataDTO"
          },
          "userData": {
            "$ref": "#/components/schemas/FarcasterUserDataDTO"
          },
          "siweData": {
            "$ref": "#/components/schemas/SiweDTO"
          }
        },
        "required": [
          "encryptedData",
          "userData",
          "siweData"
        ]
      },
      "FeeDTO": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string",
            "enum": [
              "ETH",
              "ECO",
              "ECOx",
              "OAK",
              "FTST",
              "OP",
              "USDC",
              "USDCe",
              "USDbC",
              "USDT",
              "USDV",
              "USDY",
              "baseUSDbC",
              "baseUSDC",
              "opUSDC",
              "opUSDCe",
              "opUSDT",
              "opUSDV",
              "USD"
            ]
          },
          "amount": {
            "type": "string"
          }
        },
        "required": [
          "token",
          "amount"
        ]
      },
      "DeleteFeeDTO": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string",
            "enum": [
              "ETH",
              "ECO",
              "ECOx",
              "OAK",
              "FTST",
              "OP",
              "USDC",
              "USDCe",
              "USDbC",
              "USDT",
              "USDV",
              "USDY",
              "baseUSDbC",
              "baseUSDC",
              "opUSDC",
              "opUSDCe",
              "opUSDT",
              "opUSDV",
              "USD"
            ]
          }
        },
        "required": [
          "token"
        ]
      },
      "GetHistoryDTO": {
        "type": "object",
        "properties": {

        }
      },
      "CreateMerchantDTO": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "address": {
            "type": "string"
          }
        },
        "required": [
          "address"
        ]
      },
      "CreateMerchantsDTO": {
        "type": "object",
        "properties": {
          "merchants": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreateMerchantDTO"
            }
          }
        },
        "required": [
          "merchants"
        ]
      },
      "AdminUpdateMerchantDTO": {
        "type": "object",
        "properties": {
          "network": {
            "type": "string",
            "enum": [
              "SEPOLIA",
              "OPTIMISM_SEPOLIA",
              "BASE_SEPOLIA",
              "ARBITRUM_SEPOLIA",
              "POLYGON_TESTNET",
              "ABSTRACT_TESTNET",
              "OPTIMISM",
              "BASE",
              "ARBITRUM",
              "MANTLE",
              "POLYGON",
              "CELO",
              "ABSTRACT",
              "MANTLE_SEPOLIA",
              "ETHEREUM",
              "ECO_NET",
              "ECO_TEST_NET",
              "BASE_MAINNET",
              "OPTIMISM_MAINNET",
              "INK",
              "UNICHAIN"
            ]
          },
          "acceptedToken": {
            "type": "string",
            "enum": [
              "ETH",
              "ECO",
              "ECOx",
              "OAK",
              "FTST",
              "OP",
              "USDC",
              "USDCe",
              "USDbC",
              "USDT",
              "USDV",
              "USDY",
              "baseUSDbC",
              "baseUSDC",
              "opUSDC",
              "opUSDCe",
              "opUSDT",
              "opUSDV",
              "USD"
            ]
          },
          "themeColor": {
            "type": "string"
          },
          "address": {
            "type": "string"
          }
        },
        "required": [
          "address"
        ]
      },
      "UpdateMerchantDTO": {
        "type": "object",
        "properties": {
          "network": {
            "type": "string",
            "enum": [
              "SEPOLIA",
              "OPTIMISM_SEPOLIA",
              "BASE_SEPOLIA",
              "ARBITRUM_SEPOLIA",
              "POLYGON_TESTNET",
              "ABSTRACT_TESTNET",
              "OPTIMISM",
              "BASE",
              "ARBITRUM",
              "MANTLE",
              "POLYGON",
              "CELO",
              "ABSTRACT",
              "MANTLE_SEPOLIA",
              "ETHEREUM",
              "ECO_NET",
              "ECO_TEST_NET",
              "BASE_MAINNET",
              "OPTIMISM_MAINNET",
              "INK",
              "UNICHAIN"
            ]
          },
          "acceptedToken": {
            "type": "string",
            "enum": [
              "ETH",
              "ECO",
              "ECOx",
              "OAK",
              "FTST",
              "OP",
              "USDC",
              "USDCe",
              "USDbC",
              "USDT",
              "USDV",
              "USDY",
              "baseUSDbC",
              "baseUSDC",
              "opUSDC",
              "opUSDCe",
              "opUSDT",
              "opUSDV",
              "USD"
            ]
          },
          "themeColor": {
            "type": "string"
          }
        }
      },
      "MeshTransactionsQueryDTO": {
        "type": "object",
        "properties": {
          "sort": {
            "type": "object"
          },
          "sortOrder": {
            "type": "string"
          },
          "pageNumber": {
            "type": "object"
          },
          "pageSize": {
            "type": "object"
          },
          "projection": {
            "type": "object"
          },
          "startDate": {
            "type": "object"
          },
          "endDate": {
            "type": "object"
          },
          "softDeleteOptionsDTO": {
            "type": "object"
          },
          "transactionID": {
            "type": "string"
          },
          "userID": {
            "type": "string"
          },
          "idempotentID": {
            "type": "string"
          },
          "state": {
            "type": "string",
            "enum": [
              "MESH_TRANSACTION_PENDING",
              "MESH_TRANSACTION_COMPLETED",
              "MESH_TRANSACTION_FAILED"
            ]
          }
        }
      },
      "MeshToAddressDTO": {
        "type": "object",
        "properties": {
          "network": {
            "type": "string",
            "enum": [
              "SEPOLIA",
              "OPTIMISM_SEPOLIA",
              "BASE_SEPOLIA",
              "ARBITRUM_SEPOLIA",
              "POLYGON_TESTNET",
              "ABSTRACT_TESTNET",
              "OPTIMISM",
              "BASE",
              "ARBITRUM",
              "MANTLE",
              "POLYGON",
              "CELO",
              "ABSTRACT",
              "MANTLE_SEPOLIA",
              "ETHEREUM",
              "ECO_NET",
              "ECO_TEST_NET",
              "BASE_MAINNET",
              "OPTIMISM_MAINNET",
              "INK",
              "UNICHAIN"
            ]
          },
          "token": {
            "type": "string",
            "enum": [
              "ETH",
              "ECO",
              "ECOx",
              "OAK",
              "FTST",
              "OP",
              "USDC",
              "USDCe",
              "USDbC",
              "USDT",
              "USDV",
              "USDY",
              "baseUSDbC",
              "baseUSDC",
              "opUSDC",
              "opUSDCe",
              "opUSDT",
              "opUSDV",
              "USD"
            ]
          },
          "walletAddress": {
            "type": "string"
          },
          "addressTag": {
            "type": "string"
          },
          "amount": {
            "type": "string"
          }
        },
        "required": [
          "walletAddress"
        ]
      },
      "LinkTokenTransferOptionsDTO": {
        "type": "object",
        "properties": {
          "toAddresses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MeshToAddressDTO"
            }
          },
          "amountInFiat": {
            "type": "string"
          },
          "transferType": {
            "type": "string",
            "enum": [
              "DEPOSIT",
              "PAYMENT",
              "ONRAMP"
            ]
          },
          "fundingOptions": {
            "$ref": "#/components/schemas/MeshToAddressDTO"
          },
          "isInclusiveFeeEnabled": {
            "type": "boolean"
          }
        },
        "required": [
          "toAddresses",
          "amountInFiat"
        ]
      },
      "CreateLinkTokenDTO": {
        "type": "object",
        "properties": {
          "transferOptions": {
            "$ref": "#/components/schemas/LinkTokenTransferOptionsDTO"
          },
          "brokerType": {
            "type": "string",
            "enum": [
              "BINANCE_INTERNATIONAL",
              "COINBASE",
              "KRAKEN"
            ]
          },
          "restrictMultipleAccounts": {
            "type": "boolean"
          }
        },
        "required": [
          "transferOptions",
          "brokerType"
        ]
      },
      "CreateNotifiUserDTO": {
        "type": "object",
        "properties": {
          "notifiEmail": {
            "type": "string"
          }
        },
        "required": [
          "notifiEmail"
        ]
      },
      "OFACSanctionedEntitiesDTO": {
        "type": "object",
        "properties": {
          "sanctionedEntities": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "sanctionedEntities"
        ]
      },
      "GetProfileImageUploadDataDTO": {
        "type": "object",
        "properties": {
          "imageType": {
            "type": "string",
            "enum": [
              "PDF",
              "BMP",
              "GIF",
              "JPEG",
              "PNG",
              "TIFF",
              "SVG"
            ]
          },
          "address": {
            "type": "string"
          }
        },
        "required": [
          "imageType",
          "address"
        ]
      },
      "DocumentUploadData": {
        "type": "object",
        "properties": {
          "uploadUrl": {
            "type": "string"
          },
          "downloadUrl": {
            "type": "string"
          },
          "downloadBaseUrl": {
            "type": "string"
          },
          "s3Key": {
            "type": "string"
          },
          "expires": {
            "type": "string"
          },
          "postDataFields": {
            "type": "object"
          }
        },
        "required": [
          "uploadUrl",
          "downloadUrl",
          "downloadBaseUrl",
          "s3Key",
          "expires",
          "postDataFields"
        ]
      },
      "AdminUpdateUserAddressDTO": {
        "type": "object",
        "properties": {
          "network": {
            "type": "string",
            "enum": [
              "SEPOLIA",
              "OPTIMISM_SEPOLIA",
              "BASE_SEPOLIA",
              "ARBITRUM_SEPOLIA",
              "POLYGON_TESTNET",
              "ABSTRACT_TESTNET",
              "OPTIMISM",
              "BASE",
              "ARBITRUM",
              "MANTLE",
              "POLYGON",
              "CELO",
              "ABSTRACT",
              "MANTLE_SEPOLIA",
              "ETHEREUM",
              "ECO_NET",
              "ECO_TEST_NET",
              "BASE_MAINNET",
              "OPTIMISM_MAINNET",
              "INK",
              "UNICHAIN"
            ]
          },
          "address": {
            "type": "string"
          },
          "userID": {
            "type": "string"
          }
        },
        "required": [
          "network",
          "address",
          "userID"
        ]
      },
      "UpdateUserAddressDTO": {
        "type": "object",
        "properties": {
          "network": {
            "type": "string",
            "enum": [
              "SEPOLIA",
              "OPTIMISM_SEPOLIA",
              "BASE_SEPOLIA",
              "ARBITRUM_SEPOLIA",
              "POLYGON_TESTNET",
              "ABSTRACT_TESTNET",
              "OPTIMISM",
              "BASE",
              "ARBITRUM",
              "MANTLE",
              "POLYGON",
              "CELO",
              "ABSTRACT",
              "MANTLE_SEPOLIA",
              "ETHEREUM",
              "ECO_NET",
              "ECO_TEST_NET",
              "BASE_MAINNET",
              "OPTIMISM_MAINNET",
              "INK",
              "UNICHAIN"
            ]
          },
          "address": {
            "type": "string"
          }
        },
        "required": [
          "network",
          "address"
        ]
      },
      "AdminUpdateUserFlagsDTO": {
        "type": "object",
        "properties": {
          "userID": {
            "type": "string"
          },
          "flags": {
            "type": "string",
            "enum": [
              "SHOPPING_WAIT_LISTED",
              "THROUGH_SHOPPING_WAIT_LIST",
              "IS_MERCHANT"
            ]
          },
          "op": {
            "type": "string",
            "enum": [
              "ADD",
              "REMOVE"
            ]
          }
        },
        "required": [
          "userID",
          "flags",
          "op"
        ]
      },
      "UpdateUserFlagsDTO": {
        "type": "object",
        "properties": {
          "flags": {
            "type": "string",
            "enum": [
              "SHOPPING_WAIT_LISTED",
              "THROUGH_SHOPPING_WAIT_LIST",
              "IS_MERCHANT"
            ]
          }
        },
        "required": [
          "flags"
        ]
      },
      "TwitterUserDataDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "handle": {
            "type": "string"
          },
          "verified": {
            "type": "string"
          },
          "followers": {
            "type": "string"
          },
          "profile_image": {
            "type": "string"
          },
          "created": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "name",
          "email",
          "handle",
          "verified",
          "followers",
          "profile_image",
          "created"
        ]
      },
      "UserDataDTO": {
        "type": "object",
        "properties": {
          "address": {
            "type": "string"
          },
          "phoneNumber": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "receivedAt": {
            "format": "date-time",
            "type": "string"
          },
          "authMethod": {
            "type": "string",
            "enum": [
              "EMAIL",
              "TWITTER",
              "FARCASTER",
              "EOA"
            ]
          },
          "hasMigratedFromBeam": {
            "type": "boolean"
          },
          "twitterUserData": {
            "$ref": "#/components/schemas/TwitterUserDataDTO"
          },
          "bridgeOfframpCustomerID": {
            "type": "string"
          },
          "bridgeOfframpExternalAccountID": {
            "type": "string"
          }
        },
        "required": [
          "address",
          "phoneNumber",
          "email",
          "receivedAt"
        ]
      },
      "SetAuthMethodDTO": {
        "type": "object",
        "properties": {
          "authMethod": {
            "type": "string",
            "enum": [
              "EMAIL",
              "TWITTER",
              "FARCASTER",
              "EOA"
            ]
          }
        },
        "required": [
          "authMethod"
        ]
      },
      "UpdateEmailDTO": {
        "type": "object",
        "properties": {
          "address": {
            "type": "string"
          },
          "expire": {
            "type": "number"
          },
          "email": {
            "type": "string"
          },
          "signature": {
            "type": "string"
          }
        },
        "required": [
          "address",
          "expire",
          "email",
          "signature"
        ]
      },
      "MoveUserToHistoryDTO": {
        "type": "object",
        "properties": {
          "userID": {
            "type": "string"
          }
        },
        "required": [
          "userID"
        ]
      },
      "DeleteUserDTO": {
        "type": "object",
        "properties": {
          "userID": {
            "type": "string"
          }
        },
        "required": [
          "userID"
        ]
      }
    }
  }
}
